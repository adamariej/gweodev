"##############################################################################"
"##############################################################################"
"##                                                                          ##"
"##                        VIMRC CONFIGURATION FILE                          ##"
"##                                                                          ##"
"## Last Update        : 1st June 2015                                       ##"
"## Author             : Julien Adam <julien.adam-dev@sfr.fr>                ##"
"## License            : BFB Licence ("Bear Full of Beer" license)           ##"
"## Last plugin update : 1st June 2015                                       ##"
"##                                                                          ##"
"##############################################################################"
"##############################################################################"

"##############################################################################"
"#                           PLUGIN MANAGER INIT                              #"
"##############################################################################"
set nocompatible                       " disable retro compatibility with vi
filetype off                           " Disabling autoload plugins
set rtp+=~/.vim/bundle/Vundle.vim/     " adding vundle to runtime path
call vundle#begin()                    " start plugin declaration sequence
let g:vundle_default_git_proto = 'git' " use git by default for update
Plugin 'VundleVim/Vundle.vim'             " Plugin manager

"##############################################################################"
"#                              LOADED PLUGINS                                #"
"##############################################################################"

"""""""""""""""""""""""""""""""""""""""""""""""
"                 VIM INTERFACE               "
"""""""""""""""""""""""""""""""""""""""""""""""
let g:airline#extensions#tabline#enabled = 1 " Enabling tabline with only one tab
set laststatus=2                             " display statusline all the time
set timeoutlen=1000                          " timeout for shortcuts
set noshowmode                               " remove " -- MODE -- " displaying under the statusline
set t_Co=256                                 " Enable 256 colors in terminal for Vim
let g:airline_powerline_fonts = 1            " To disable if fonts not available

" For fonts 'Plugin'
" 1. Download plugin with vundle
" 2. go to ~/.vim/bundle/fonts and run ./install.sh
" 3. change font terminal with one recently uploaded (eg: Inconsolata,...)
" 4. Enjoy !
Plugin 'powerline/fonts'            " Powerline fonts for smooth characters
let g:airline#extensions#whitespace#trailing_format = 'tr[%s]'
let g:airline#extensions#whitespace#mixed_indent_format = 'mix[%s]'
let g:airline#extensions#whitespace#long_format = 'l[%s]'
let g:airline#extensions#whitespace#mixed_indent_file_format = 'mix-f[%s]'
let g:airline#extensions#tabline#fnamemod = ':t'
Plugin 'bling/vim-airline'          " Displaying smooth statusline
Plugin 'flazz/vim-colorschemes'     " Download huge bunchs of themes

"""""""""""""""""""""""""""""""""""""""""""""""
"                   NERDTREE                  "
"""""""""""""""""""""""""""""""""""""""""""""""
let g:nerdtree_tabs_open_on_console_startup = 0 " Disable on startup
let g:nerdtree_tabs_open_on_gui_startup = 0     " Disable on gui startup
let g:nerdtree_tabs_autoclose = 1               " Close when last window
let g:nerdtree_tabs_synchronize_view = 0        " sync Tree between tab
let g:nerdtree_tabs_smart_startup_focus = 1     " Keep focus on desired window
let NERDTreeShowBookmarks = 1                   " Enable bookmarks displaying by default
Plugin 'scrooloose/nerdtree'                    " Standard NERDTree
Plugin 'jistr/vim-nerdtree-tabs'                " Extended NERDTree w/ tabs handling
Plugin 'vim-scripts/Tabular'

"""""""""""""""""""""""""""""""""""""""""""""""
"                   SNIPPETS                  "
"""""""""""""""""""""""""""""""""""""""""""""""
let g:UltiSnipsExpandTrigger="<tab>"         " change snippet trigger on '<tab>'
let g:UltiSnipsListSnippets="<c-l>"          " List Snippets for curretn filetype
let g:UltiSnipsJumpForwardTrigger="<tab>"    " change 'next field' to '<tab>'
let g:UltiSnipsJumpBackwardTrigger="<s-tab>" " change 'previous field to '<shift-tab>'

" For installing snippets engine UltiSnips if vim is without python support
" 1. Install python from sources (--enable-shared)
" 2. Recomile vim with --enable-python?interp (? = 3 if python3)
Plugin 'honza/vim-snippets'                  " snippets files (support both ultisnips and snipMate)
Plugin 'gweodoo/mpi-snippets'                " Special snippets: MPI
set runtimepath+=~/.vim/bundle/mpi-snippets
Plugin 'SirVer/ultisnips'                    " snippets engine (own format + snipMate)
" let g:NERDSpaceDelims = 1
" let g:NERDTrimTrailingWhitespace = 1
" let g:NERDCommentEmptyLines = 1
" let g:NERDCustomDelimiters = {
	" \ 'c': { 'left': '/*','right': '*/' },
	" \ 'cpp': { 'left': '/*','right': '*/' }
" \}
" Plugin 'scrooloose/nerdcommenter'            " Commenter

"""""""""""""""""""""""""""""""""""""""""""""""
"                     GIT                     "
"""""""""""""""""""""""""""""""""""""""""""""""
set diffopt+=vertical            " Gdiff is split in vertical way
Plugin 'tpope/vim-fugitive'      " main git plugin, commands in vim
Plugin 'airblade/vim-gitgutter'  " Display differences in gutter
Plugin 'Xuyuanp/nerdtree-git-plugin' " Show Git status in NerdTree

"""""""""""""""""""""""""""""""""""""""""""""""
"                MISCELLANEOUS                "
"""""""""""""""""""""""""""""""""""""""""""""""
Plugin 'vim-scripts/a.vim'        " switch between .h and .c*
let g:tagbar_autofocus=1
Plugin 'majutsushi/tagbar'        " ctags handling
Plugin 'kien/ctrlp.vim'           " Tag/file search engine
Plugin 'tpope/vim-markdown'       " markdown automatic support
Plugin 'Raimondi/delimitMate'     " Auto closing
let g:gundo_prefer_python3 = 1
Plugin 'sjl/gundo.vim'
Plugin 'tpope/vim-surround'

"##############################################################################"
"#                           FINISHING PLUGIN INIT                            #"
"##############################################################################"
" end of plugin declaration
call vundle#end()

"##############################################################################"
"#                              KEY MAPPING                                   #"
"##############################################################################"
let mapleader = "," " map ',' as leader key

"########################## FUNCTION KEY MAPPING ##############################"
" Never bind <F1> key -> can be intercept by xterm
" FS Tree Panel
" Current File Tag Panel
map <F2> :TagbarToggle<cr>
"map <F3> :
map <F4> :GundoToggle<cr>
" Disabling Highlighting
map <F5> :GitGutterUndoHunk<cr> 
map <F6> :GitGutterPrevHunk<cr>
map <F7> :GitGutterNextHunk<cr>
" Run Make command
map <F8> :diffget BA<cr>
map <F9> :diffget LO<cr>
map <F10> :diffget RE<cr>
"map <F10> 
"No mapping for F11 : fullscreen
map <F12> :make<cr>
set pastetoggle=<F12>
"##############################################################################"
" Next tab
nmap <Tab> :tabn<cr>
" Previous tab
map <S-Tab> :tabp<cr>
map <leader>n :tabnew 
" Next Buffer
map <C-n> :bn<cr>
" Previous Buffer
map <C-B> :bp<cr>

" clipboard handling (if compiled w/ Vim)
" Copy the line into the clipboard
" nmap <leader>; yy
" Copy the selection into the clipboard
" vmap <leader>; "+y
" Paste the clipboard where the cursor is
" map <leader>: "+p<cr>
map <c-o> :CtrlPTag<cr>
nmap <leader>; :nohlsearch<cr>

" tags handling
" Look for under-cursor tag and open the result in new tab
noremap ff :exec("tjump ".expand("<cword>"))<CR>
" Look for under-cursor tag and open the result in new vsplit
noremap fd :vsp <CR>:exec("tjump ".expand("<cword>"))<CR>
" Look for under-cursor tag and open the result in new hsplit
noremap fs :exec("stjump ".expand("<cword>"))<CR>
" Look for under-cursor tag and replace the current window
noremap ft :tab split<CR>:exec("tjump ".expand("<cword>"))<CR>
" Look for under-cursor tag and replace the current window
noremap fe :pop<CR>
noremap fz  :ta<CR>
" list maching tags
noremap fa :exec("stselect ".expand("<cword>"))<CR>

"mouse support
" Scroll 3 lines up with the mouse wheel
map <ScrollWheelUp> 3<C-Y>
" Scroll 3 lines down with the mouse wheel
map <ScrollWheelDown> 3<C-E> 

"##############################################################################"
"#                              MAIN SETTINGS                                 #"
"##############################################################################"
syntax enable                      " enable syntax highlightning
filetype indent plugin on          " Enable indent & plugin using
set history=256                    " command line history size
set smartcase                      " smart cases depending on searches
set lbr                            " smooth line breaking
set magic                          " regexs portability
set directory=~/.vim/vimswaps,/tmp " storing temp files
set noswapfile                     " no swap files
set nobackup                       " no permanent backup when saving files
set writebackup                    " just temporary backups when saving files
set autoread                       " reload when updated from outside
set autochdir                      " chdir in directory when opening a file
set wildmode=longest:full,full     " Completion mode : Longest(w/ visu) then full
set wildmenu                       " completion menu
let g:tex_flavor = "latex"         " default Tex context
let g:load_doxygen_syntax=1
let g:doxygen_enhanced_color=1
set tags=tags;
set hidden                         " hide unloaded buffers"
set incsearch                      " Incremental search"
set hlsearch                       " Highlight other results"
set wildignore=*swp,*~,*bak,*pyc,*.o
set visualbell                     "no beeps"
set noerrorbells                   "no beeps"

"##############################################################################"
"#                                 INTERFACE                                  #"
"##############################################################################"
colorscheme molokai            " define color schemes (see ~/.vim/bundle/vim-colorschemes)
set background=dark            " luminosity style (light/dark)
set cursorline                 " highlight current line
" set cursorcolumn             " highlight current column
set fileencodings=utf-8        " default encoding for new files
set scrolloff=3                " Min on lines to keep around cursor
set number                     " set lines number
set backspace=indent,eol,start " redefine standard backspace behavior
set splitbelow                 " when split, open at below
set splitright                 " when vsplit, open at right
set showcmd                    " display current command in status line
set wrap                       " automatic lines wrapping
set tabstop=4                  " tab size (as spaces)
set shiftwidth=4               " shifting insertion (like tabs)
set shiftround                 " Always use a multiple of shiftwidth to indent
set noexpandtab
set autoindent                 " auto-indent
set copyindent                 " Copy the current indent"
set mouse=a                    " Mouse support
"##############################################################################"
"#                                MISCELLANEOUS                              ##"
"##############################################################################"
set listchars=tab:\|\ ,space:\ ,trail:¶
set list
set cino=N-s " avoid C++ namespace indentation when formatting sources

"##############################################################################"
"#                               MISCELLANEOUS                               ##"
"##############################################################################"
" open external command in quickfix when outputs
autocmd QuickFixCmdPost [^l]* nested cwindow " open quickfix window
autocmd QuickFixCmdPost    l* nested lwindow " open wuickfix window
autocmd QuickFixCmdPost *grep* cwindow
" map cursor on last position
autocmd BufReadPost * if line("'\"") > 0 && line ("'\"") <= line("$") | exe "normal! g'\"" | endif
" autocmd when file open 
autocmd BufReadPre,BufNewFile *.md,README*,*.tex setlocal textwidth=80 colorcolumn=80
runtime ftplugin/man.vim
" reopen a file w/ sudo command
cmap w!! w !sudo tee % >/dev/null
